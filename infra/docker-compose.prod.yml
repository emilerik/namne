version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    container_name: namne_postgres
    restart: unless-stopped
    env_file:
      - ../.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-appuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      POSTGRES_DB: ${POSTGRES_DB:-appdb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-appuser} -d ${POSTGRES_DB:-appdb}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: ..
      dockerfile: infra/Dockerfile
    container_name: namne_app
    restart: unless-stopped
    env_file:
      - ../.env
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-appuser}:${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}@postgres:5432/${POSTGRES_DB:-appdb}
      ENV: production
      SECRET_KEY: ${SECRET_KEY:?SECRET_KEY is required}
      CORS_ORIGINS: ${CORS_ORIGINS:?CORS_ORIGINS is required}
    ports:
      - "${APP_PORT:-8000}:8000"
    volumes:
      - ../server/data:/app/data:ro # Read-only mount for data files
    networks:
      - app-network
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 2 &&
        if [ ! -f /app/data/.initialized ]; then
          echo 'First run: Initializing database...' &&
          python -m app.db.init_db &&
          python -m app.init_users &&
          mkdir -p /app/data &&
          touch /app/data/.initialized;
        fi &&
        echo 'Starting server...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4
      "

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
